//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Move and Fire"",
            ""id"": ""38f1dc2c-c88e-4d2e-bca4-8a7bb98e80d5"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""6988625b-22e5-44ef-b9d3-5acfb7341dad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fe272f5e-309c-420c-928a-4556fb31ec96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""53b2d6b2-b686-4551-b7a8-6f69c14e9c81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootFirstWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""5f961d70-d153-4598-a4f0-b05c0d2c8d37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootSecondWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""44ecadb0-2766-4352-8cb9-0fc83d7e077d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30847391-7fc0-4967-99db-adb260c658a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db95e2f7-62f6-4b7d-9369-44e025893f7e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c9c8a78-648d-417e-a225-768eea998ab3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61b7306d-bba5-4858-bd33-62af3a020089"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05707180-d024-4b75-80f7-6a81aacf2137"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootFirstWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d24251f-a5e1-4e55-84c6-f9c97b663a4d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootSecondWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65fe7eb5-eb23-46f8-a045-70609d71db41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d8f08ac-271b-4399-933a-849bdb7a105b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Move and Fire
        m_MoveandFire = asset.FindActionMap("Move and Fire", throwIfNotFound: true);
        m_MoveandFire_MoveForward = m_MoveandFire.FindAction("MoveForward", throwIfNotFound: true);
        m_MoveandFire_RotateLeft = m_MoveandFire.FindAction("RotateLeft", throwIfNotFound: true);
        m_MoveandFire_RotateRight = m_MoveandFire.FindAction("RotateRight", throwIfNotFound: true);
        m_MoveandFire_ShootFirstWeapon = m_MoveandFire.FindAction("ShootFirstWeapon", throwIfNotFound: true);
        m_MoveandFire_ShootSecondWeapon = m_MoveandFire.FindAction("ShootSecondWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move and Fire
    private readonly InputActionMap m_MoveandFire;
    private IMoveandFireActions m_MoveandFireActionsCallbackInterface;
    private readonly InputAction m_MoveandFire_MoveForward;
    private readonly InputAction m_MoveandFire_RotateLeft;
    private readonly InputAction m_MoveandFire_RotateRight;
    private readonly InputAction m_MoveandFire_ShootFirstWeapon;
    private readonly InputAction m_MoveandFire_ShootSecondWeapon;
    public struct MoveandFireActions
    {
        private @PlayerControls m_Wrapper;
        public MoveandFireActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_MoveandFire_MoveForward;
        public InputAction @RotateLeft => m_Wrapper.m_MoveandFire_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_MoveandFire_RotateRight;
        public InputAction @ShootFirstWeapon => m_Wrapper.m_MoveandFire_ShootFirstWeapon;
        public InputAction @ShootSecondWeapon => m_Wrapper.m_MoveandFire_ShootSecondWeapon;
        public InputActionMap Get() { return m_Wrapper.m_MoveandFire; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveandFireActions set) { return set.Get(); }
        public void SetCallbacks(IMoveandFireActions instance)
        {
            if (m_Wrapper.m_MoveandFireActionsCallbackInterface != null)
            {
                @MoveForward.started -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnMoveForward;
                @RotateLeft.started -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.performed -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.canceled -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnRotateLeft;
                @RotateRight.started -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnRotateRight;
                @RotateRight.performed -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnRotateRight;
                @RotateRight.canceled -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnRotateRight;
                @ShootFirstWeapon.started -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnShootFirstWeapon;
                @ShootFirstWeapon.performed -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnShootFirstWeapon;
                @ShootFirstWeapon.canceled -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnShootFirstWeapon;
                @ShootSecondWeapon.started -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnShootSecondWeapon;
                @ShootSecondWeapon.performed -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnShootSecondWeapon;
                @ShootSecondWeapon.canceled -= m_Wrapper.m_MoveandFireActionsCallbackInterface.OnShootSecondWeapon;
            }
            m_Wrapper.m_MoveandFireActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
                @ShootFirstWeapon.started += instance.OnShootFirstWeapon;
                @ShootFirstWeapon.performed += instance.OnShootFirstWeapon;
                @ShootFirstWeapon.canceled += instance.OnShootFirstWeapon;
                @ShootSecondWeapon.started += instance.OnShootSecondWeapon;
                @ShootSecondWeapon.performed += instance.OnShootSecondWeapon;
                @ShootSecondWeapon.canceled += instance.OnShootSecondWeapon;
            }
        }
    }
    public MoveandFireActions @MoveandFire => new MoveandFireActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMoveandFireActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnShootFirstWeapon(InputAction.CallbackContext context);
        void OnShootSecondWeapon(InputAction.CallbackContext context);
    }
}
